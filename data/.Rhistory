"Hello world"
# This is a comment
# Los comentarios en R son iguales que en Python!
? factor
? identity
edad-de-mi-hermana <- 17
7
"
nombreDelCurso = "Herramientas de programación"
nombreDelCurso = "Herramientas de programación"
edad-DeMiHermana <- 17
edadDeMiHermana <- 17
nombreDelCurso = "Herramientas de programación"
nombreDelCurso
edadDeMiHermana
nombreDelCurso
print(63L)
print("Hola!")
A <- matrix(1:9, nrow = 3, ncol = 3)
A
A[1,2]
# creamos las matrices A y B
arreglo1 <- c(1,2)
arreglo2 <- c(3,4)
A <- cbind(arreglo1, arreglo2)
arreglo1 <- c(5,6)
arreglo2 <- c(7,8)
B <- cbind(arreglo1, arreglo2)
A
B
C <- A+B
C
# creamos las matrices A y B
arreglo1 <- c(1,3)
arreglo2 <- c(2,4)
A <- cbind(arreglo1, arreglo2)
arreglo1 <- c(5,7)
arreglo2 <- c(6,8)
B <- cbind(arreglo1, arreglo2)
# Suma
C <- A+B
# Resta
# Multiplicación
# Multiplicación elemento por elemento
# Transposición
A
C <- A+B
C
C <- A-B
# creamos las matrices A y B
arreglo1 <- c(1,3)
arreglo2 <- c(2,4)
A <- cbind(arreglo1, arreglo2)
arreglo1 <- c(5,7)
arreglo2 <- c(6,8)
B <- cbind(arreglo1, arreglo2)
C <- A-B
C
# Multiplicación
C <- A*B
C
# creamos las matrices A y B
arreglo1 <- c(1,2)
arreglo2 <- c(3,4)
A <- cbind(arreglo1, arreglo2)
arreglo1 <- c(5,6)
arreglo2 <- c(7,8)
B <- cbind(arreglo1, arreglo2)
C <- A*B
C
C
A
# creamos las matrices A y B
arreglo1 <- c(1,2)
arreglo2 <- c(3,4)
A <- cbind(arreglo1, arreglo2)
# creamos las matrices A y B
arreglo1 <- c(1,2)
arreglo2 <- c(3,4)
A <- cbind(arreglo1, arreglo2)
arreglo1 <- c(5,6)
arreglo2 <- c(7,8)
B <- cbind(arreglo1, arreglo2)
C <- A*B
C
A
B
# Multiplicación
C <- A%*%B
C
A
# creamos las matrices A y B
arreglo1 <- c(1,3)
arreglo2 <- c(2,4)
A <- cbind(arreglo1, arreglo2)
arreglo1 <- c(5,7)
arreglo2 <- c(6,8)
B <- cbind(arreglo1, arreglo2)
C <- A%*%B
C
# Transposición
C <- t(A)
A
C
C <- A+B
C
# Cargando datos
datos = read.csv("cpj-database.csv")
datos = read.csv("/Users/alorozco22/OneDrive - Universidad de los Andes/Documentos 2020-20/Curso Programación para datos EdContinua/Clases/Implementación/clase6/cpj-database.csv")
datos
view(datos)
View(datos)
datos
datos <- c(6,3,6,3,2)
datos
datos[2]
datos[1]
tail(datos)
lenght(datos)
length(datos)
dameUnaSuma <- function(listaDeValores){
# Recuperaamos el primver valor
primerValor <- listaDeValores[1]
# Recuperamos el último valor
ultimoValor <- listaDeValores[length(datos)]
primerValor + ultimoValor
}
dameUnaSuma(datos)
dameUnaSuma(1,2,3)
dameUnaSuma(lista1, lista2)
col1 <- c(0,0,0)
A <- cbind(col1, col1, col1)
A
muestrameAlgo <- function(parametro1){
'Hola! me mandaron algo'
}
muestrameAlgo(87)
columna1 <- c(0,0,0)
A <- cbind(columna1, columna1, columna1)
A
dimeAlgo <- function(loQueMeVanAMandar){
'Alguien me pidió que dijera algo!!!'
}
dimeAlgo(67)
A[1]
dim(A)
B <- cbind(columna1, columna1, columna1, columna1)
B
dim(B)
dim(B)[1]
dimeAlgo <- function(loQueMeVanAMandar){
for (col in dim(loQueMeVanAMandar)[1]){
'hola'
}
}
dimeAlgo(A)
dim(loQueMeVanAMandar)[1]
dim(A)[1]
dimeAlgo <- function(loQueMeVanAMandar){
for (col in 1:dim(loQueMeVanAMandar)[1]){
'hola'
}
}
dimeAlgo(A)
# Ejercicio largo
col1 <- c(0,0,0)
A <- cbind(col1, col1, col1)
A
sumaleALaMatriz <- function(loQueMeMandan){
'Hola! me acaban de invocar'
}
sumaleALaMatriz(23)
nrow(A)
B <- cbind(col1, col1, col1, col1)
nrow(B)
B
seq_len(nrow(A))
paste("¡Adiós", 4)
sumaleALaMatriz <- function(loQueMeMandan){
for(fila in seq_len(nrow(A))){
paste('Vamos en la fila ', fila)
}
}
sumaleALaMatriz(A)
sumaleALaMatriz <- function(loQueMeMandan){
for(fila in seq_len(nrow(A))){
mensaje <- paste('Vamos en la fila ', fila)
mensaje
}
}
sumaleALaMatriz(A)
sumaleALaMatriz <- function(loQueMeMandan){
for(fila in seq_len(nrow(A))){
mensaje <- paste('Vamos en la fila ', fila)
print(mensaje)
}
}
sumaleALaMatriz(A)
ncol(A)
ncol(B)
B
sumaleALaMatriz <- function(loQueMeMandan){
for(fila in seq_len(nrow(A))){
mensaje <- paste('Vamos en la fila ', fila)
print(mensaje)
for(columna in seq_len(ncol(B))){
mensaje1 <- paste('Vamos en la columna ', columna)
print(mensaje1)
}
}
}
sumaleALaMatriz(A)
sumaleALaMatriz <- function(loQueMeMandan){
for(fila in seq_len(nrow(loQueMeMandan))){
mensaje <- paste('Vamos en la fila ', fila)
print(mensaje)
for(columna in seq_len(ncol(loQueMeMandan))){
mensaje1 <- paste('Vamos en la columna ', columna)
print(mensaje1)
}
}
}
sumaleALaMatriz(A)
##############################################################
# Caso de estudio - Proceso de aprendizaje de máquinas (Con red neuronal)
# Taller: replicando el script de Dr. Bharatendra Rai
# en: https://www.youtube.com/watch?v=-Vs9Vae2KI0&t=1218s
# Para el curso Taller comercio y desarrollo regional (Módulo Aprendizaje de máquinas)
# Educación Continua | Universidad de los Andes
# 20 de octubre 2021
##############################################################
################################
# CONFIGURACIONES INICIALES
################################
# Indicamos a R dónde buscar y escribir archivos: directorio de trabajo
setwd("/Users/alorozco22/OneDrive - Universidad de los Andes/Documentos 2021-20/2021 08 30 EdCo Curso Contraloría ML Fayber/repo-comercio/data")
# Cargamos los datos a un DataFrame
data <- read.csv("binary.csv", header = TRUE)
# Echamos un ojo a las columnas, su tipo y primeros valores
str(data)
# Visualizamos la tabla de datos
View(data)
################################
# LIMPIEZA DE DATOS
################################
# Para ESTE MODELO EN PARTICULAR, queremos que los datos estén entre 0 y 1
# para acceder a la columna gre en el dataframe data indicamos: data$gre
# <- se utiliza para asignarle un nuevo valor
# limpiamos: calculamos (valor-mínimo)/(máximo-mínimo)
data$gre <- (data$gre - min(data$gre))/(max(data$gre) - min(data$gre))
data$gpa <- (data$gpa - min(data$gpa))/(max(data$gpa) - min(data$gpa))
data$rank <- (data$rank - min(data$rank))/(max(data$rank)-min(data$rank))
################################
# SEGMENTACIÓN DE DATOS
################################
# Como vamos a aplicar un procedimiento aleatorio, podemos indicar una semilla
# para poder repetir el procedimiento con los mismos resultados
set.seed(222)
# con la función "sample" podemos generar muestras de los datos:
# en este caso, son dos grupos, maso el 70% de los datos en uno, y el 30% en el otro.
ind <- sample(2, nrow(data), replace = TRUE, prob = c(0.7, 0.3))
# con la función head(datos) podemos ver los 6 primeros datos del indicador de grupo:
head(ind)
# finalmente sólo armamos los dos Dataframes: para entrenar el modelo, y para probarlo con datos nuevos
training <- data[ind==1,]
testing <- data[ind==2,]
# Veamos los dos DataFrames
View(training)
View(testing)
################################
# ENTRENAMIENTO DEL MODELO
# Recuerden: este es un problema supervisado de clasificación
# Nada raro, así el nombre del modelo sea muy elegante
################################
# En este ejercicio vamos a usar un modelo llamado Red neuronal
# Para poder usarlo, tenemos que instalar el paquete estadístico que lo tiene implementado
install.packages("neuralnet")
# Y luego de instalarlo en el sistema, lo importamos a aquí para poder llamarlo
library(neuralnet)
# Guardamos los resultados de nuestro modelo en una nueva variable "n" en este caso
n <- neuralnet(admit~gre+gpa+rank,
data = training,
hidden = 2,
err.fct = "ce",
linear.output = FALSE)
plot(n)
output <- compute(n, training[,-1])
head(output$net.result)
head(training[1,])
in4 <- 0.0455 + (0.82344*0.7586206897) + (1.35186*0.8103448276) + (-0.87435*0.6666666667)
out4 <- 1/(1+exp(-in4))
in5 <- -7.06125 +(8.5741*out4)
out5 <- 1/(1+exp(-in5))
out5
View(output)
head(training[5,])
head(training[1:5,])
head(training[,])
head(output$net.result)
head(training[,])
head(output$net.result)
head(training[,])
output_test <- compute(n, testing[,-1])
head(output$net.result) # Este modelo nos devuelve la probabilidad de que la persona sea admitida
head(testing[,]) # Estos son los datos de entrenamiento originales, para ver
output_test <- compute(n, testing[,-1])
head(output_test$net.result) # Este modelo nos devuelve la probabilidad de que la persona sea admitida
head(testing[,]) # Estos son los datos de entrenamiento originales, para ver
# Confusion Matrix & Misclassification Error - training data
output <- compute(n, training[,-1])
p1 <- output$net.result
pred1 <- ifelse(p1>0.5, 1, 0)
tab1 <- table(pred1, training$admit)
tab1
1-sum(diag(tab1))/sum(tab1)
# Confusion Matrix & Misclassification Error - testing data
output <- compute(n, testing[,-1])
p2 <- output$net.result
pred2 <- ifelse(p2>0.5, 1, 0)
tab2 <- table(pred2, testing$admit)
tab2
1-sum(diag(tab2))/sum(tab2)
(4+28)/(87+28+4)
View(data)
corr(data$admit, data$gre)
cor(data$admit, data$gre)
cor(data$admit, data$gpa)
cor(data$admit, data$rank)
cor(data$admit, data$gre)
cor(data$admit, data$gpa)
cor(data$admit, data$rank)
cor(data$admit, data$gre)
cor(data$admit, data$gpa)
cor(data$admit, data$rank)
